{"version":3,"sources":["components/cities-search-select/loadOptions.js","components/cities-search-select/index.js","components/weather-data-plot/index.js","components/weather-forecast/index.js","components/time-slot-selector/index.js","App.js","components/leaflet-map/index.js","components/header/index.js","components/footer/index.js","utilities/constants/index.js","index.js"],"names":["localStorage","getItem","options","fetch","headers","Accept","then","r","json","iter","length","push","value","label","setItem","JSON","stringify","loadOptions","search","prevOptions","a","parse","searchLower","toLowerCase","filteredOptions","filter","includes","hasMore","slicedOptions","slice","time","styles","control","base","state","borderColor","isFocused","boxShadow","SearchSelect","props","getWeatherForSelected","reflectChange","bind","this","setState","style","marginTop","closeMenuOnSelect","onChange","theme","colors","primary25","primary","neutral0","primary50","neutral80","neutral90","neutral70","React","Component","WeatherForecast","counter","timeSlot","filteredWeatherData","weatherData","item","index","cardCarousel","createRef","autoplay","autoplay_speed","alignment","spread","position","zIndex","ref","map","Card","text","width","backgroundColor","key","textAlign","padding","name","iconId","weather","id","description","split","s","charAt","toUpperCase","substring","join","Header","className","main","temp_min","temp_max","Body","Text","format","tz","timeZone","dt_txt","cityName","pressure","humidity","wind","speed","clouds","all","Row","marginLeft","ButtonGroup","aria-label","Button","onClick","prevIt","current","prev","nextIt","next","CustomizedAxisTick","x","y","payload","transform","dy","textAnchor","fill","PureComponent","moment","require","WeatherDataPlot","entry","color","data","temp","height","requiredData","margin","top","right","bottom","left","stroke","dataKey","tick","formatter","renderColorfulLegendText","barSize","type","self","defaultValue","TimeSlotSelect","defaultTimeSlot","reflectTimeSlotChange","getOptions","placeholder","LeafletMap","lat","lng","Map","center","zoom","TileLayer","attribution","url","Marker","Popup","popupMessage","title","Badge","badgeTitle","Footer","Navbar","fixed","collapseOnSelect","expand","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","eventKey","App","showData","errorDisplay","axios","get","TIMEZONE_DB_GET_ZONE","response","console","log","offset","gmtOffset","utc","unix","Math","abs","error","selected","list","city","coord","lon","setLocalTimeZone","option","footer","scrollIntoView","behavior","Container","Col","sm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.063af61b.chunk.js","sourcesContent":["// uses localstorage to save the cities data\nif (localStorage.getItem(\"citiesData\") === null) {\n  let options = [];\n  fetch(\"city-data/city_filtered_list.json\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  })\n    .then(r => r.json())\n    .then(json => {\n      for (let iter = 0; iter < json.length; iter++) {\n        options.push({\n          value: json[iter][\"id\"],\n          label: json[iter][\"name\"] + \" in \" + json[iter][\"country\"]\n        });\n      }\n      localStorage.setItem(\"citiesData\", JSON.stringify(options));\n    });\n}\n\n// controls the options and search filter\nconst loadOptions = async (search, prevOptions) => {\n  let options = JSON.parse(localStorage.getItem(\"citiesData\"));\n  let filteredOptions;\n  if (!search) {\n    filteredOptions = options;\n  } else {\n    const searchLower = search.toLowerCase();\n\n    filteredOptions = options.filter(({ label }) =>\n      label.toLowerCase().includes(searchLower)\n    );\n  }\n\n  const hasMore = filteredOptions.length > prevOptions.length + 10;\n  const slicedOptions = filteredOptions.slice(\n    prevOptions.length,\n    prevOptions.length + 10\n  );\n\n  return {\n    options: slicedOptions,\n    hasMore\n  };\n};\n\nexport default loadOptions;\n","// this uses a searchable select component\n// to give the user an option to select cities\n// in the US, France and Russia\n// data for cities was obtained from the open weather website\n// data was filtered to create a smaller dataset\n// localStorage is used to keep the data in the browser once loaded\n// user can search and select a city using this select menu\n// custom styling for the select menu has been applied\n// see the public folder for finding more on the cities data used\n\nimport React from \"react\";\nimport AsyncPaginate from \"react-select-async-paginate\";\nimport loadOptions from \"./loadOptions\";\n\nconst styles = {\n  control: (base, state) => ({\n    ...base,\n    // Overwrittes the different states of border\n    borderColor: state.isFocused ? \"#343940\" : \"#343940\",\n    // Removes weird border around container\n    boxShadow: state.isFocused ? null : null,\n    \"&:hover\": {\n      // Overwrittes the different states of border\n      borderColor: state.isFocused ? \"#343940\" : \"#343940\"\n    }\n  })\n};\n\nclass SearchSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: [],\n      getWeatherForSelected: props.getWeatherForSelected\n    };\n    this.reflectChange = this.reflectChange.bind(this);\n  }\n\n  // calls parent component on selection\n  reflectChange(value) {\n    this.setState({\n      value: value\n    });\n    this.state.getWeatherForSelected(value);\n  }\n\n  render(props) {\n    return (\n      <div>\n        <label style={{ marginTop: 20 }}>\n          {\" \"}\n          Select a city{\" \"}\n          <small>\n            <i>\n              <b> (Choose from cities in France, United States or Russia)</b>\n            </i>\n          </small>\n        </label>\n        <AsyncPaginate\n          value={this.state.value}\n          loadOptions={loadOptions}\n          closeMenuOnSelect={true}\n          onChange={this.reflectChange}\n          styles={styles}\n          theme={theme => ({\n            ...theme,\n            colors: {\n              ...theme.colors,\n              primary25: \"#413EA0\",\n              primary: \"#413EA0\",\n              neutral0: \"#222\",\n              primary50: \"#222\",\n              neutral80: \"white\",\n              neutral90: \"white\",\n              neutral70: \"white\"\n            }\n          })}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchSelect;\n","// this component is used for displaying the plot for\n// temparature, cloudiness and humidity for the city selected\n\nimport React, { PureComponent } from \"react\";\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Scatter\n} from \"recharts\"; // components to build the recharts component\nimport Moment from \"react-moment\";\nimport \"moment-timezone\"; // for local time needs\n\n// custom axis marker used on the y axis\nclass CustomizedAxisTick extends PureComponent {\n  render() {\n    const { x, y, payload } = this.props;\n\n    return (\n      <g transform={`translate(${x},${y})`}>\n        <text x={-30} y={0} dy={16} textAnchor=\"end\" fill=\"#666\">\n          {payload.value === 0 ? \"\" : payload.value}\n        </text>\n      </g>\n    );\n  }\n}\n\nlet time, reqData;\n\nconst moment = require(\"moment-timezone\");\n\n// plot component for displaying the\n// three weather params mentioned above\nclass WeatherDataPlot extends PureComponent {\n  renderColorfulLegendText(value, entry) {\n    const { color } = entry;\n\n    return <span style={{ color }}>{value}</span>;\n  }\n\n  requiredData() {\n    // value for time slot selected by user\n    let counter = this.props.timeSlot - 1;\n\n    // timezone for local time in the city\n    let timeZone = this.props.timeZone;\n\n    // filtering weather data to get 5 data points according to time slot selected\n    let filteredWeatherData = this.props.weatherData.filter((item, index) => {\n      if (index === counter) {\n        counter += 8;\n        return item;\n      }\n      return null;\n    });\n\n    // creating data for the composed chart plot component\n    reqData = filteredWeatherData.map((item, index) => {\n      let data = {};\n      data[\"Date\"] = moment(item.dt_txt + \" GMT\")\n        .tz(timeZone)\n        .format(\"DD MMM, YY\");\n      data[\"Temperature\"] = item.main.temp;\n      data[\"Humidity\"] = item.main.humidity;\n      data[\"Cloudiness\"] = item.clouds.all;\n\n      time = item.dt_txt;\n      return data;\n    });\n\n    return reqData;\n  }\n\n  render() {\n    return (\n      <div style={{ width: \"100%\", height: 300 }}>\n        <ResponsiveContainer>\n          <ComposedChart\n            width={600}\n            height={400}\n            data={this.requiredData()}\n            margin={{\n              top: 20,\n              right: 20,\n              bottom: 20,\n              left: 20\n            }}\n          >\n            <CartesianGrid stroke=\"#d3d3d3\" />\n            <XAxis dataKey=\"Date\" />\n            <YAxis tick={<CustomizedAxisTick />} />\n            <Tooltip />\n            <Legend formatter={this.renderColorfulLegendText} />\n            <Bar dataKey=\"Temperature\" barSize={30} fill=\"#413ea0\" />\n            <Line type=\"monotone\" dataKey=\"Humidity\" stroke=\"#ff7300\" />\n            <Scatter dataKey=\"Cloudiness\" fill=\"red\" />\n          </ComposedChart>\n        </ResponsiveContainer>\n        <h4 style={{ textAlign: \"center\" }}>\n          @\n          <Moment format=\"h:mm A\" tz={this.props.timeZone}>\n            {time + \" GMT\"}\n          </Moment>{\" \"}\n          Local Time\n        </h4>\n      </div>\n    );\n  }\n}\n\nexport default WeatherDataPlot;\n","// this component is used to display the data recieved from the api\n// using bootstrap card components placed in a carousel\n\nimport React from \"react\";\nimport { Card, Button, Row, ButtonGroup } from \"react-bootstrap\";\nimport Moment from \"react-moment\";\nimport \"moment-timezone\"; // for showing local time in city selected\nimport ReactCardCarousel from \"react-card-carousel\"; // displaying cards (library)\nimport WeatherIcon from \"react-icons-weather\"; // for getting owm icon (library)\nimport \"./forecast.css\";\n\nconst WeatherForecast = props => {\n  // value for time slot selected by user\n  let counter = props.timeSlot - 1;\n\n  // filtering weather data to get 5 data points according to time slot selected\n  const filteredWeatherData = props.weatherData.filter((item, index) => {\n    if (index === counter) {\n      counter += 8;\n      return item;\n    }\n    return null;\n  });\n\n  // will act as reference to the CardCarousel component\n  let cardCarousel = React.createRef();\n\n  return (\n    <div>\n      {/* card carousel component for displaying weather cards */}\n      <ReactCardCarousel\n        autoplay={true}\n        autoplay_speed={9000}\n        alignment=\"horizontal\"\n        spread=\"wide\"\n        style={{ position: \"relative\", zIndex: \"-1\" }}\n        ref={cardCarousel}\n      >\n        {/* maps data to create cards for parameters received from the api */}\n        {filteredWeatherData.map((item, index) => (\n          <Card\n            text=\"white\"\n            style={{ width: \"18rem\", backgroundColor: \"#222\" }}\n            key={index}\n          >\n            <h2 style={{ textAlign: \"center\", padding: \"20px\" }}>\n              <WeatherIcon name=\"owm\" iconId={item.weather[0].id + \"\"} />\n              &nbsp;{\" \"}\n              {item.weather[0].description\n                .toLowerCase()\n                .split(\" \")\n                .map(s => s.charAt(0).toUpperCase() + s.substring(1))\n                .join(\" \")}\n            </h2>\n            <Card.Header style={{ backgroundColor: \"#413EA0\" }}>\n              <i className=\"wi wi-thermometer\" /> &nbsp; &nbsp;{\" \"}\n              {item.main.temp_min} °F to {item.main.temp_max} °F\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n                <small>\n                  <Moment format=\"DD MMM, YY @ h:mm A\" tz={props.timeZone}>\n                    {item.dt_txt + \" GMT\"}\n                  </Moment>\n                  &nbsp; ({props.cityName})\n                </small>\n              </Card.Text>\n              <Card.Text>\n                <small>\n                  <Moment format=\"DD MMM, YY @ h:mm A\">{item.dt_txt}</Moment>\n                  &nbsp; (UTC time)\n                </small>\n              </Card.Text>\n              <div>\n                <hr />\n              </div>\n              <Card.Text>\n                <i className=\"wi wi-barometer\" />\n                <i> &nbsp; &nbsp;Pressure</i> → {item.main.pressure} hPa\n              </Card.Text>\n              <Card.Text>\n                <i className=\"wi wi-humidity\" />\n                <i>&nbsp; &nbsp; Humidity</i> → {item.main.humidity}%\n              </Card.Text>\n              <div>\n                <hr />\n              </div>\n              <Card.Text>\n                <i className=\"wi wi-windy\" />\n                <i> &nbsp; &nbsp; Wind Speed</i> → {item.wind.speed} mph\n              </Card.Text>\n              <Card.Text>\n                <i className=\"wi wi-cloud-up\" />\n                <i> &nbsp; &nbsp; Cloudiness</i> → {item.clouds.all}%\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        ))}\n      </ReactCardCarousel>\n      {/* card carousel ends here */}\n\n      {/* control buttons for the card carousel */}\n      <Row style={{ marginTop: \"150px\", marginLeft: \"40px\" }}>\n        <ButtonGroup aria-label=\"group\">\n          <Button\n            className=\"controlButtons\"\n            onClick={prevIt => cardCarousel.current.prev()}\n          >\n            Previous\n          </Button>\n          <Button\n            className=\"controlButtons\"\n            onClick={nextIt => cardCarousel.current.next()}\n          >\n            Next\n          </Button>\n        </ButtonGroup>\n      </Row>\n    </div>\n  );\n};\n\nexport default WeatherForecast;\n","// this component is used to create the\n// eight quarter time slot selector\n// here a custom style has been created for the select component\n// data has been filtered to create the 8 time slots that can be seen by the user\n\nimport React from \"react\";\nimport Select from \"react-select\";\n\nconst moment = require(\"moment-timezone\"); // for city's local time needs\n\nconst styles = {\n  control: (base, state) => ({\n    ...base,\n    // Overwrittes the different states of border\n    borderColor: state.isFocused ? \"#343940\" : \"#343940\",\n    // Removes weird border around container\n    boxShadow: state.isFocused ? null : null,\n    \"&:hover\": {\n      // Overwrittes the different states of border\n      borderColor: state.isFocused ? \"#343940\" : \"#343940\"\n    }\n  })\n};\n\nlet defaultValue = \"Loading ...\";\n\nclass TimeSlotSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeSlot: props.defaultTimeSlot,\n      reflectTimeSlotChange: props.reflectTimeSlotChange\n    };\n    this.reflectChange = this.reflectChange.bind(this);\n  }\n\n  reflectChange(value) {\n    this.setState({\n      timeSlot: value\n    });\n    this.state.reflectTimeSlotChange(value); // changes parent's state\n  }\n\n  getOptions() {\n    // timezone for city\n    let timeZone = this.props.timeZone;\n\n    // keeping just first eight data points\n    let filteredData = this.props.weatherData.filter((item, index) => {\n      if (index < 8) {\n        return item;\n      }\n      return null;\n    });\n\n    // mapping data to create options for the select menu\n    let selectableTimes = filteredData.map((item, index) => {\n      let data = {};\n      data[\"value\"] = index + 1;\n      data[\"label\"] =\n        \"Every \" +\n        moment(item.dt_txt + \" GMT\")\n          .tz(timeZone)\n          .format(\"h:mm A\") +\n        \" starting \" +\n        moment(item.dt_txt + \" GMT\")\n          .tz(timeZone)\n          .format(\"MMM DD, YYYY\") +\n        \" Local Time\";\n\n      if (index === 0) {\n        defaultValue = data[\"label\"];\n      }\n\n      return data;\n    });\n    return selectableTimes;\n  }\n\n  render(props) {\n    return (\n      <div>\n        <label style={{ marginTop: 20 }}>\n          {\" \"}\n          Select a time slot{\" \"}\n          <small>\n            <i>\n              <b> (Choose from any of the eight 3 hr time periods)</b>\n            </i>\n          </small>\n        </label>\n        <Select\n          styles={styles}\n          style={{ zIndex: 9999 }}\n          options={this.getOptions()}\n          placeholder={defaultValue}\n          onChange={this.reflectChange}\n          closeMenuOnSelect={true}\n          theme={theme => ({\n            ...theme,\n            colors: {\n              ...theme.colors,\n              primary25: \"#413EA0\",\n              primary: \"#413EA0\",\n              neutral0: \"#222\",\n              primary50: \"#222\",\n              neutral80: \"white\",\n              neutral90: \"white\",\n              neutral70: \"white\"\n            }\n          })}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TimeSlotSelect;\n","// this is the main app component\n// this contains 6 components you will find in the components folder\n// it calls the weather api and passes the respective data and state props\n// to these components.\n\nimport React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport SearchSelect from \"./components/cities-search-select\";\nimport WeatherForecast from \"./components/weather-forecast\";\nimport WeatherDataPlot from \"./components/weather-data-plot\";\nimport TimeSlotSelect from \"./components/time-slot-selector\";\nimport LeafletMap from \"./components/leaflet-map\";\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport { OPEN_WEATHER_FIVE_DAY_FORECAST } from \"./utilities/constants\";\nimport { TIMEZONE_DB_GET_ZONE } from \"./utilities/constants\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nlet self;\n\nclass App extends React.Component {\n  state = {\n    weatherData: [], // weather data\n    cityName: \"\", // for name of the city once selected\n    timeZone: \"ETC/UTC\", // initial time zone\n    timeSlot: 1, // selector time slot\n    showData: false, // for rendering only required components\n    lat: \"\", // for latitude of city once selected\n    lng: \"\", // for longitude of city once selected\n    errorDisplay: false // in case of an error\n  };\n\n  // calls the timezonde db api to retrieve the offset and make the timezone\n  // according to moment package. (check moment.tz.names()) to learn more\n  // sets the timezone in the state variable for the city under consideration once created\n  setLocalTimeZone(lat, lng) {\n    axios.get(TIMEZONE_DB_GET_ZONE + \"&lat=\" + lat + \"&lng=\" + lng).then(\n      response => {\n        console.log(response);\n        let offset = response.data.gmtOffset;\n        let timeZone;\n        if (offset < 0) {\n          timeZone =\n            \"Etc/GMT+\" + moment.utc(moment.unix(Math.abs(offset))).format(\"H\");\n        } else {\n          timeZone = \"Etc/GMT-\" + moment.utc(moment.unix(offset)).format(\"H\");\n        }\n        self.setState({\n          timeZone: timeZone\n        });\n      },\n      error => {\n        self.setState({\n          errorDisplay: true\n        });\n      }\n    );\n  }\n\n  // gets the weather data and changes the state accordingly\n  getWeatherForSelected(selected) {\n    console.log(selected);\n    axios.get(OPEN_WEATHER_FIVE_DAY_FORECAST + selected.value).then(\n      response => {\n        self.setState({\n          weatherData: response.data.list,\n          cityName: response.data.city.name,\n          showData: true,\n          lat: response.data.city.coord.lat,\n          lng: response.data.city.coord.lon\n        });\n        self.setLocalTimeZone(\n          response.data.city.coord.lat,\n          response.data.city.coord.lon\n        );\n      },\n      error => {\n        self.setState({\n          errorDisplay: true\n        });\n      }\n    );\n  }\n\n  // if user selects another time slot\n  reflectTimeSlotChange(option) {\n    self.setState({\n      timeSlot: option.value\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    self = this;\n  }\n\n  componentDidUpdate() {\n    // to scroll down once user selects something\n    this.footer.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  render() {\n    return (\n      <div>\n        <Container>\n          <Header title=\"Weather\" badgeTitle=\"Fox\" />\n          <br />\n          <SearchSelect getWeatherForSelected={this.getWeatherForSelected} />\n          {this.state.showData ? (\n            <TimeSlotSelect\n              defaultTimeSlot={this.state.timeSlot}\n              reflectTimeSlotChange={this.reflectTimeSlotChange}\n              weatherData={this.state.weatherData}\n              timeZone={this.state.timeZone}\n              timeSlot={this.state.timeSlot}\n            />\n          ) : null}\n          <Row>\n            <Col sm={6}>\n              <Row style={{ position: \"relative\", marginTop: \"200px\" }}>\n                {this.state.showData ? (\n                  <WeatherForecast\n                    timeSlot={this.state.timeSlot}\n                    weatherData={this.state.weatherData}\n                    cityName={this.state.cityName}\n                    timeZone={this.state.timeZone}\n                  />\n                ) : null}\n              </Row>\n            </Col>\n            <Col sm={6}>\n              <Row style={{ position: \"relative\", marginTop: \"60px\" }}>\n                {this.state.showData ? (\n                  <WeatherDataPlot\n                    timeSlot={this.state.timeSlot}\n                    timeZone={this.state.timeZone}\n                    weatherData={this.state.weatherData}\n                  />\n                ) : null}\n              </Row>\n              <Row>\n                {this.state.showData ? (\n                  <LeafletMap\n                    lat={this.state.lat}\n                    lng={this.state.lng}\n                    popupMessage={this.state.cityName}\n                    zoom={13}\n                  />\n                ) : null}\n              </Row>\n            </Col>\n          </Row>\n\n          {this.state.errorDisplay ? (\n            <div>\n            <h3 style={{ textAlign: \"center\" }}>\n              <Badge variant=\"warning\" style={{padding: '20px'}}>\n                  {\" \"}\n                  Unable to fetch data. Please try again later!{\" \"}\n              </Badge>\n              </h3>\n            </div>\n          ) : null}\n          \n          <div\n            ref={ref => (this.footer = ref)}\n            style={{ position: \"relative\", marginTop: \"100px\" }}\n          />\n\n          <Footer />\n\n\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// this component uses the leaflet package\n// this is used to show the city's location on a map\n\nimport React from \"react\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"./map.css\";\n\nclass LeafletMap extends React.Component {\n  render() {\n    const position = [this.props.lat, this.props.lng];\n    return (\n      <Map center={position} zoom={this.props.zoom}>\n        <TileLayer\n          attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={position}>\n          <Popup>{this.props.popupMessage}</Popup>\n        </Marker>\n      </Map>\n    );\n  }\n}\n\nexport default LeafletMap;\n","// header text to show title of the app\n\nimport React from \"react\";\nimport { Badge, h2 } from \"react-bootstrap\";\n\nconst Header = props => {\n  return (\n    <div>\n      <h2 style={{ marginTop: \"25px\", textAlign: \"center\" }}>\n        {props.title}{\" \"}\n        <Badge style={{ backgroundColor: \"#413EA0\" }}>\n          {\" \"}\n          {props.badgeTitle}\n        </Badge>\n      </h2>\n    </div>\n  );\n};\n\nexport default Header;\n","// Footer component (with mentions and acknowledgments)\n\nimport React from \"react\";\nimport {Navbar, Nav} from 'react-bootstrap';\nimport { FaLinkedinIn, FaGithub, FaArtstation, FaHeart } from 'react-icons/fa'\n\nconst Footer = props => {\n  return (\n    <Navbar fixed=\"bottom\" collapseOnSelect expand=\"lg\" style={{backgroundColor: \"#413EA0\"}} variant=\"dark\">\n      <Navbar.Brand href=\"https://openweathermap.org/\">@OWM Powered</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"https://nirbhay.me\"><b>Made with <FaHeart/> in Rochester, NY</b></Nav.Link>\n        </Nav>\n        <Nav>\n          <Nav.Link href=\"https://github.com/nirbhayph/weatherfox\"><FaGithub/> View Project on GitHub</Nav.Link>\n          <Nav.Link href=\"https://linkedin.com/in/nirbhaypherwani\"><FaLinkedinIn/></Nav.Link>\n          <Nav.Link eventKey={2} href=\"https://nirbhay.me\">\n            <FaArtstation/>\n          </Nav.Link>\n          <Nav.Link eventKey={3} href=\"https://github.com/nirbhayph\">\n            <FaGithub/>\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default Footer;\n","// oper weather map cities data (this data is provided for reference) (a separate filtered chunk has been used in the app (See public folder))\nexport const CITIES_DATA = 'http://ganskop.com/proxy/https://people.rit.edu/np5318/howistheweather_data/city.list.json';\n\n// open weather map api key\nexport const OPEN_WEATHER_API_KEY = '8d857ff354f64e3ac0b841e26812533c';\n\n// timezonedb api key\nexport const TIMEZONE_DB_API_KEY = 'HIIZEJW9VZSN';\n\n// api end point for 5 day forecast\nexport const OPEN_WEATHER_FIVE_DAY_FORECAST = \"http://api.openweathermap.org/data/2.5/forecast?appid=\"+OPEN_WEATHER_API_KEY+\"&units=imperial&id=\";\n\n// api end point for timezone db\nexport const TIMEZONE_DB_GET_ZONE = \"http://api.timezonedb.com/v2.1/get-time-zone?key=\"+TIMEZONE_DB_API_KEY+\"&format=json&by=position\";\n\n// sample data from open weather (provided for reference)\nexport const SAMPLE_DATA = \"http://ganskop.com/proxy/https://people.rit.edu/np5318/howistheweather_data/sample_weather_data.json\";\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}